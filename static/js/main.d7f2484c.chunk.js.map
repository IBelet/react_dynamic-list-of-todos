{"version":3,"sources":["components/propTypes/TodoPropTypes.js","components/Todo/Todo.jsx","components/TodoListControllers/TodoListControllers.jsx","components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["PropTypes","number","isRequired","string","bool","Todo","todo","selectUser","selectedUserId","completed","userId","title","className","classNames","TodoList__item","type","readOnly","button","onClick","TodoListControllers","handleChange","searchValue","selectValue","name","value","onChange","TodoList","state","search","visibleTodos","filter","all","active","event","setState","target","this","props","todos","renderedTodos","includes","map","key","id","React","PureComponent","request","url","fetch","then","response","ok","Error","status","statusText","json","result","data","a","getUser","user","CurrentUser","userError","updateUser","newUserId","newUser","clearSelectedUser","email","phone","App","todosError","getTodos","catch","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d7f2484c.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nexport const TodoPropTypes = {\n  id: PropTypes.number.isRequired,\n  userId: PropTypes.number,\n  title: PropTypes.string.isRequired,\n  updatedAt: PropTypes.string.isRequired,\n  createdAt: PropTypes.string.isRequired,\n  completed: PropTypes.bool,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { TodoPropTypes } from '../propTypes/TodoPropTypes';\n\nexport const Todo = ({\n  todo,\n  selectUser,\n  selectedUserId,\n}) => {\n  const { completed, userId, title } = todo;\n\n  return (\n    <div\n      className={classNames({\n        TodoList__item: true,\n        'TodoList__item--checked': completed,\n        'TodoList__item--unchecked': !completed,\n      })}\n    >\n      <label>\n        <input type=\"checkbox\" readOnly />\n        <p>{title}</p>\n      </label>\n\n      <button\n        className={classNames({\n          button: true,\n          'TodoList__user-button': true,\n          'TodoList__user-button--selected': selectedUserId === userId,\n        })}\n        type=\"button\"\n        onClick={() => selectUser(userId)}\n      >\n        {`User #${userId}`}\n      </button>\n    </div>\n  );\n};\n\nTodo.propTypes = {\n  todo: PropTypes.shape(TodoPropTypes).isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoListControllers = ({\n  handleChange,\n  searchValue,\n  selectValue,\n}) => (\n  <>\n    <label>\n      <span>\n        {`Search todo: `}\n      </span>\n      <input\n        name=\"search\"\n        type=\"text\"\n        value={searchValue}\n        onChange={handleChange}\n      />\n    </label>\n\n    <label>\n      <select\n        name=\"visibleTodos\"\n        onChange={handleChange}\n        value={selectValue}\n      >\n        <option value=\"all\">\n          All\n        </option>\n        <option value=\"active\">\n          Active\n        </option>\n        <option value=\"completed\">\n          Completed\n        </option>\n      </select>\n    </label>\n  </>\n);\n\nTodoListControllers.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  searchValue: PropTypes.string.isRequired,\n  selectValue: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\nimport { TodoPropTypes } from '../propTypes/TodoPropTypes';\nimport { Todo } from '../Todo';\nimport { TodoListControllers } from '../TodoListControllers';\n\nexport class TodoList extends React.PureComponent {\n  state = {\n    search: '',\n    visibleTodos: 'all',\n  }\n\n  filter = {\n    all: () => true,\n    completed: todo => todo.completed,\n    active: todo => !todo.completed,\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId, selectUser } = this.props;\n    const { search, visibleTodos } = this.state;\n\n    const renderedTodos = todos.filter(todo => (\n      todo.title.includes(search) && this.filter[visibleTodos](todo)\n    ));\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <TodoListControllers\n          handleChange={this.handleChange}\n          searchValue={search}\n          selectValue={visibleTodos}\n        />\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {\n              renderedTodos.map(todo => (\n                <li\n                  key={todo.id}\n                >\n                  <Todo\n                    todo={todo}\n                    selectUser={selectUser}\n                    selectedUserId={selectedUserId}\n                  />\n                </li>\n              ))\n            }\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape(TodoPropTypes),\n  ).isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nfunction request(url) {\n  return fetch(`${BASE_URL}${url}`)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    })\n    .then(result => result.data);\n}\n\nexport async function getTodos() {\n  const todos = await request(`/todos`);\n\n  return todos.filter(todo => todo.userId && todo.title);\n}\n\nexport async function getUser(userId) {\n  const user = await request(`/users/${userId}`);\n\n  return user;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.PureComponent {\n  state = {\n    user: {},\n    userError: false,\n  }\n\n  componentDidMount() {\n    const { userId } = this.props;\n\n    this.updateUser(userId);\n  }\n\n  componentDidUpdate() {\n    const { userId } = this.props;\n\n    this.updateUser(userId);\n  }\n\n  async updateUser(newUserId) {\n    if (this.state.user.id === newUserId) {\n      return;\n    }\n\n    const newUser = await getUser(newUserId);\n\n    if (!newUser) {\n      this.setState({ userError: true });\n\n      return;\n    }\n\n    this.setState({\n      userError: false,\n      user: newUser,\n    });\n  }\n\n  render() {\n    const { user, userError } = this.state;\n    const { clearSelectedUser } = this.props;\n\n    return (\n      <>\n        {userError\n          ? (<h3>{`Can't find user info `}</h3>)\n          : (\n            <div className=\"CurrentUser\">\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={clearSelectedUser}\n              >\n                Clear\n              </button>\n              <h2 className=\"CurrentUser__title\">\n                <span>\n                  {`Selected user: ${user.id}`}\n                </span>\n              </h2>\n\n              <h3 className=\"CurrentUser__name\">\n                {user.name}\n              </h3>\n              <p className=\"CurrentUser__email\">\n                {user.email}\n              </p>\n              <p className=\"CurrentUser__phone\">\n                {user.phone}\n              </p>\n            </div>\n          )}\n      </>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearSelectedUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    todosError: false,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({\n          todos,\n        });\n      })\n      .catch(() => this.setState({ todosError: true }));\n  }\n\n  selectUser = (selectedUserId) => {\n    this.setState({\n      selectedUserId,\n    });\n  }\n\n  clearSelectedUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { todos, selectedUserId, todosError } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {todosError\n            ? (\n              <h2>\n                {`Can't load todos, please reload the page `}\n              </h2>\n            )\n            : (\n              <TodoList\n                todos={todos}\n                selectedUserId={selectedUserId}\n                selectUser={this.selectUser}\n              />\n            )\n          }\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearSelectedUser={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}