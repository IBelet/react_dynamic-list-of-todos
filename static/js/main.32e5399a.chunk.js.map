{"version":3,"sources":["components/propTypes/TodoPropTypes.js","components/Todo/Todo.jsx","components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["PropTypes","number","isRequired","string","bool","Todo","todo","selectUser","selectedUserId","className","classNames","TodoList__item","completed","type","readOnly","title","button","userId","onClick","TodoList","state","search","visibleTodos","filter","all","active","handleChange","event","setState","target","name","value","this","props","todos","renderedTodos","includes","onChange","map","key","id","React","PureComponent","request","url","fetch","then","response","ok","Error","status","statusText","json","result","data","CurrentUser","user","updateUser","newUserId","newUser","clearSelectedUser","email","phone","App","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.32e5399a.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nexport const TodoPropTypes = {\n  id: PropTypes.number.isRequired,\n  userId: PropTypes.number,\n  title: PropTypes.string.isRequired,\n  updatedAt: PropTypes.string.isRequired,\n  createdAt: PropTypes.string.isRequired,\n  completed: PropTypes.bool,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { TodoPropTypes } from '../propTypes/TodoPropTypes';\n\nexport const Todo = ({ todo, selectUser, selectedUserId }) => (\n  <div\n    className={classNames({\n      TodoList__item: true,\n      'TodoList__item--checked': todo.completed,\n      'TodoList__item--unchecked': !todo.completed,\n    })}\n  >\n    <label>\n      <input type=\"checkbox\" readOnly />\n      <p>{todo.title}</p>\n    </label>\n\n    <button\n      className={classNames({\n        button: true,\n        'TodoList__user-button': true,\n        'TodoList__user-button--selected':\n          selectedUserId === todo.userId,\n      })}\n      type=\"button\"\n      onClick={() => selectUser(todo.userId)}\n    >\n      {`User #${todo.userId}`}\n    </button>\n  </div>\n);\n\nTodo.propTypes = {\n  todo: PropTypes.shape(TodoPropTypes).isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\nimport { TodoPropTypes } from '../propTypes/TodoPropTypes';\nimport { Todo } from '../Todo';\n\nexport class TodoList extends React.PureComponent {\n  state = {\n    search: '',\n    visibleTodos: 'all',\n  }\n\n  filter = {\n    all: () => true,\n    completed: todo => todo.completed,\n    active: todo => !todo.completed,\n  }\n\n  handleChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  render() {\n    const { todos, selectedUserId, selectUser } = this.props;\n    const { search, visibleTodos } = this.state;\n    const renderedTodos = todos.filter(todo => (\n      todo.title.includes(search) && this.filter[visibleTodos](todo)\n    ));\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <label>\n          <span>\n            {`Search todo: `}\n          </span>\n          <input\n            name=\"search\"\n            type=\"text\"\n            value={search}\n            onChange={this.handleChange}\n          />\n        </label>\n\n        <label>\n          <select\n            name=\"visibleTodos\"\n            onChange={this.handleChange}\n            value={visibleTodos}\n          >\n            <option value=\"all\">\n              All\n            </option>\n            <option value=\"active\">\n              Active\n            </option>\n            <option value=\"completed\">\n              Completed\n            </option>\n          </select>\n        </label>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {\n              renderedTodos.map(todo => (\n                <li\n                  key={todo.id}\n                >\n                  <Todo\n                    todo={todo}\n                    selectUser={selectUser}\n                    selectedUserId={selectedUserId}\n                  />\n                </li>\n              ))\n            }\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape(TodoPropTypes),\n  ).isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nfunction request(url) {\n  return fetch(`${BASE_URL}${url}`)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    })\n    .then(result => result.data);\n}\n\nexport function getTodos() {\n  return request(`/todos`);\n}\n\nexport function getUser(userId) {\n  return request(`/users/${userId}`);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.PureComponent {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    const { userId } = this.props;\n\n    this.updateUser(userId);\n  }\n\n  componentDidUpdate() {\n    const { userId } = this.props;\n\n    this.updateUser(userId);\n  }\n\n  async updateUser(newUserId) {\n    if (this.state.user.id === newUserId) {\n      return;\n    }\n\n    const newUser = await getUser(newUserId);\n\n    this.setState({ user: newUser });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { clearSelectedUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={clearSelectedUser}\n        >\n          Clear\n        </button>\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user: ${user.id}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">\n          {user.name}\n        </h3>\n        <p className=\"CurrentUser__email\">\n          {user.email}\n        </p>\n        <p className=\"CurrentUser__phone\">\n          {user.phone}\n        </p>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearSelectedUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({\n          todos,\n        });\n      });\n  }\n\n  selectUser = (selectedUserId) => {\n    this.setState({\n      selectedUserId,\n    });\n  }\n\n  clearSelectedUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUserId={selectedUserId}\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearSelectedUser={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}